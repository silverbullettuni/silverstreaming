{"version":3,"sources":["Containers/ChatContainer.js","Containers/ViewContainer.js","Containers/ParticipantsContainer.js","Containers/BroadcastContainer.js","Containers/LandingContainer.js","App.js","serviceWorker.js","index.js"],"names":["ChatContainer","props","useState","message","setMessage","textbox","useRef","useEffect","className","id","map","v","user","txt","rows","cols","ref","type","onClick","value","current","list","push","ViewContainer","source","autoPlay","controls","playsInline","src","ParticipantsContainer","participantRefs","toggleMuteAll","newState","muted","console","log","participants","length","slice","index","key","el","BroadcastContainer","socketIOClient","window","location","origin","LandingContainer","tokenId","setTokenId","tokenInput","token","chars","charlen","pointer","i","Math","floor","random","charAt","htmlFor","onChange","event","target","placeholder","to","App","basename","path","component","exact","render","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.8c53e9bc.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\n\r\nexport default function ChatContainer(props) {\r\n    const [participant, setParticipant] = useState([]);\r\n    const [chat, setChat] = useState([]);\r\n    const [message, setMessage] = useState([]);\r\n\r\n    const textbox = useRef();\r\n\r\n    useEffect(() => {\r\n        \r\n    },[]);\r\n\r\n    function send(){\r\n        let value = textbox.current.value\r\n        let list = message\r\n        list.push({user:'q', txt:value})\r\n        \r\n        setMessage(list)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div id=\"record-box\" >\r\n            {\r\n                message.map(v => {\r\n                    return <div> \r\n                        <span>{v.user} : </span><span>{v.txt}</span>\r\n                    </div>\r\n                })\r\n            }   \r\n            \r\n            </div>\r\n            <div id=\"send-box\">\r\n                <textarea rows=\"1\" cols=\"80\" ref={textbox}></textarea>\r\n                <div className=\"button\">\r\n                    <button type='submit' onClick={send}>Send</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect } from 'react'\r\nimport ChatContainer from './ChatContainer';\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nconst config = {\r\n    iceServers: [\r\n        { \r\n          \"urls\": \"stun:stun.l.google.com:19302\",\r\n        },\r\n        // { \r\n        //   \"urls\": \"turn:TURN_IP?transport=tcp\",\r\n        //   \"username\": \"TURN_USERNAME\",\r\n        //   \"credential\": \"TURN_CREDENTIALS\"\r\n        // }\r\n    ]\r\n  };\r\n\r\nexport default function ViewContainer(props) {\r\n    const [source, setSource] = useState(\"\");\r\n    let peerConnection;\r\n\r\n    /*useEffect(() => {\r\n        const socket = socketIOClient(window.location.origin);\r\n        socket.on(\"offer\", (id, description) => {\r\n            peerConnection = new RTCPeerConnection(config);\r\n            peerConnection\r\n              .setRemoteDescription(description)\r\n              .then(() => peerConnection.createAnswer())\r\n              .then(sdp => peerConnection.setLocalDescription(sdp))\r\n              .then(() => {\r\n                socket.emit(\"answer\", id, peerConnection.localDescription);\r\n              });\r\n            peerConnection.ontrack = event => {\r\n                setSource(event.streams[0]);\r\n              \r\n            };\r\n            peerConnection.onicecandidate = event => {\r\n              if (event.candidate) {\r\n                socket.emit(\"candidate\", id, event.candidate);\r\n              }\r\n            };\r\n          });\r\n          \r\n          \r\n          socket.on(\"candidate\", (id, candidate) => {\r\n            peerConnection\r\n              .addIceCandidate(new RTCIceCandidate(candidate))\r\n              .catch(e => console.error(e));\r\n          });\r\n          \r\n          socket.on(\"connect\", () => {\r\n            socket.emit(\"watcher\");\r\n          });\r\n          \r\n          socket.on(\"broadcaster\", () => {\r\n            socket.emit(\"watcher\");\r\n          });\r\n          \r\n          socket.on(\"disconnectPeer\", () => {\r\n            peerConnection.close();\r\n          });\r\n\r\n          return () => socket.disconnect();\r\n\r\n    }, []);*/\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <video \r\n                className=\"mainVideoPlayer\"\r\n                autoPlay \r\n                controls \r\n                playsInline\r\n                src={source}\r\n            />\r\n            <ChatContainer/>\r\n        </div>\r\n    );\r\n}\r\n","import React, {createRef, useRef, useEffect} from 'react'\r\nimport StreamThumbnail from '../Components/StreamThumbail';\r\n\r\nexport default function ParticipantsContainer(props) {\r\n\r\n\r\n    const participantRefs = useRef([]);\r\n\r\n    useEffect(() => {\r\n        console.log(props.participants.length)\r\n        participantRefs.current = participantRefs.current.slice(0, props.participants.length);\r\n        console.log(participantRefs.current)\r\n    }, [props.participants]);\r\n\r\n    function toggleMuteAll(newState){\r\n        for(let ref of participantRefs.current){\r\n            ref.muted = newState;\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"muteButtons\">\r\n                <button onClick={() => toggleMuteAll(true)}>Mute all</button>\r\n                <button onClick={() => toggleMuteAll(false)}>Unmute all</button>\r\n            </div>            \r\n            <div className=\"thumbnails\">\r\n                {\r\n                    props.participants?.map((index, source) => {\r\n                        return  <div className=\"streamThumbnail\" key={index}>\r\n                                    <video \r\n                                        className=\"participantVideoPlayer\"\r\n                                        autoPlay \r\n                                        controls \r\n                                        playsInline\r\n                                        source={source}\r\n                                        ref={el => participantRefs.current[index-1] = el} \r\n                                        key={index}\r\n                                    />\r\n                                </div>\r\n                    })\r\n                }\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect, useRef } from 'react'\r\nimport ChatContainer from './ChatContainer';\r\nimport ParticipantsContainer from './ParticipantsContainer';\r\nimport socketIOClient from \"socket.io-client\";\r\nconst peerConnections = {};\r\nconst config = {\r\n  iceServers: [\r\n    { \r\n      \"urls\": \"stun:stun.l.google.com:19302\",\r\n    },\r\n    // { \r\n    //   \"urls\": \"turn:TURN_IP?transport=tcp\",\r\n    //   \"username\": \"TURN_USERNAME\",\r\n    //   \"credential\": \"TURN_CREDENTIALS\"\r\n    // }\r\n  ]\r\n};\r\n\r\nexport default function BroadcastContainer(props) {\r\n\r\n    const audioSelect = useRef();\r\n    const videoSelect = useRef();\r\n    const videoElement = useRef();\r\n    const socket = socketIOClient(window.location.origin);\r\n\r\n    /*useEffect(() => {\r\n        getStream()\r\n            .then(getDevices)\r\n            .then(gotDevices);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        \r\n        \r\n\r\n            socket.on(\"answer\", (id, description) => {\r\n                peerConnections[id].setRemoteDescription(description);\r\n            });\r\n            \r\n            socket.on(\"watcher\", id => {\r\n                const peerConnection = new RTCPeerConnection(config);\r\n                peerConnections[id] = peerConnection;\r\n            \r\n                let stream = videoElement.current.srcObject;\r\n                stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));\r\n            \r\n                peerConnection.onicecandidate = event => {\r\n                if (event.candidate) {\r\n                    socket.emit(\"candidate\", id, event.candidate);\r\n                }\r\n                };\r\n            \r\n                peerConnection\r\n                .createOffer()\r\n                .then(sdp => peerConnection.setLocalDescription(sdp))\r\n                .then(() => {\r\n                    socket.emit(\"offer\", id, peerConnection.localDescription);\r\n                });\r\n            });\r\n            \r\n            socket.on(\"candidate\", (id, candidate) => {\r\n                peerConnections[id].addIceCandidate(new RTCIceCandidate(candidate));\r\n            });\r\n            \r\n            socket.on(\"disconnectPeer\", id => {\r\n                peerConnections[id].close();\r\n                delete peerConnections[id];\r\n            });\r\n\r\n            return () => socket.disconnect();\r\n\r\n    }, []);\r\n\r\n    function getDevices() {\r\n        return navigator.mediaDevices.enumerateDevices();\r\n      }\r\n      \r\n      function gotDevices(deviceInfos) {\r\n        window.deviceInfos = deviceInfos;\r\n        for (const deviceInfo of deviceInfos) {\r\n          const option = document.createElement(\"option\");\r\n          option.value = deviceInfo.deviceId;\r\n          if (deviceInfo.kind === \"audioinput\") {\r\n            option.text = deviceInfo.label || `Microphone ${audioSelect.current.length + 1}`;\r\n            audioSelect.current.appendChild(option);\r\n          } else if (deviceInfo.kind === \"videoinput\") {\r\n            option.text = deviceInfo.label || `Camera ${videoSelect.current.length + 1}`;\r\n            videoSelect.current.appendChild(option);\r\n          }\r\n        }\r\n      }\r\n      \r\n      function getStream() {\r\n        if (window.stream) {\r\n          window.stream.getTracks().forEach(track => {\r\n            track.stop();\r\n          });\r\n        }\r\n        const audioSource = audioSelect.current.value;\r\n        const videoSource = videoSelect.current.value;\r\n        const constraints = {\r\n          audio: { deviceId: audioSource ? { exact: audioSource } : undefined },\r\n          video: { deviceId: videoSource ? { exact: videoSource } : undefined }\r\n        };\r\n        return navigator.mediaDevices\r\n          .getUserMedia(constraints)\r\n          .then(gotStream)\r\n          .catch(handleError);\r\n      }\r\n      \r\n      function gotStream(stream) {\r\n        window.stream = stream;\r\n        audioSelect.current.selectedIndex = [...audioSelect.current.options].findIndex(\r\n          option => option.text === stream.getAudioTracks()[0].label\r\n        );\r\n        videoSelect.current.selectedIndex = [...videoSelect.current.options].findIndex(\r\n          option => option.text === stream.getVideoTracks()[0].label\r\n        );\r\n        videoElement.current.srcObject = stream;\r\n        socket.emit(\"broadcaster\");\r\n      }\r\n      \r\n      function handleError(error) {\r\n        console.error(\"Error: \", error);\r\n      }*/\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <video \r\n                className=\"mainVideoPlayer\"\r\n                autoPlay \r\n                controls \r\n                playsInline\r\n            />  \r\n            <ParticipantsContainer participants={[\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" ]}/>\r\n            <ChatContainer/>          \r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useState, useEffect, useRef } from 'react';\r\n\r\nimport { Route, Switch, Redirect, HashRouter, Link } from 'react-router-dom';\r\n\r\nexport default function LandingContainer() {\r\n\r\n    const [tokenId, setTokenId] = useState(\"\");\r\n    const tokenInput = useRef();\r\n  \r\n    function generateToken(){\r\n        let token = '';\r\n        const chars = \"ABCDEFGHJKLMNPQRSTUVXYZabcdefghijklmnopqrstuvwxyz23456789\"\r\n        const charlen = chars.length;\r\n        let pointer = 0;\r\n        for (let i = 0; i < 12; i++){\r\n            pointer = Math.floor(Math.random()*charlen);\r\n            token += chars.charAt(pointer);\r\n        }\r\n\r\n        setTokenId(token);\r\n        tokenInput.current.value = token;\r\n    }\r\n\r\n    return (\r\n      <div className=\"container\">\r\n          <div className=\"landingInputBox\">\r\n            <div className=\"tokenGenerator\">\r\n                <button onClick={generateToken}>Generate token</button>\r\n            </div>\r\n            <div className=\"input\">\r\n                <label htmlFor=\"#tokenIdInput\">Token</label>\r\n                <input id=\"tokenIdInput\" ref={tokenInput} onChange={event => setTokenId(event.target.value)} placeholder=\"Input token id\"/>\r\n            </div>\r\n            <div className=\"buttons\">\r\n                <Link to={`/watch/${tokenId}`} className=\"modeButton\">\r\n                    <button>Watch</button>\r\n                </Link>\r\n                <Link to={`/broadcast/${tokenId}`} className=\"modeButton\">\r\n                    <button>Broadcast</button>\r\n                </Link>\r\n            </div>\r\n          </div>\r\n          \r\n      \r\n      </div>\r\n    );\r\n  }\r\n  ","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport { Route, Switch, Redirect, HashRouter, Link } from 'react-router-dom'\r\nimport ViewContainer from './Containers/ViewContainer';\r\nimport BroadcastContainer from './Containers/BroadcastContainer';\r\nimport LandingContainer from './Containers/LandingContainer';\r\n\r\nfunction App() {\r\n\r\n  const [viewerMode, setMode] = useState(true);\r\n\r\n  function handleClick(e) {\r\n    e.preventDefault();\r\n    setMode(!viewerMode);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <HashRouter basename=\"/\">\r\n        <Link to='/' className=\"AppHeader\">\r\n          Silverstreaming Demo\r\n        </Link>\r\n      \r\n        <Switch>\r\n          <Route path=\"/home\" component={LandingContainer} />\r\n          <Route path=\"/watch/:id\" component={ViewContainer} />\r\n          <Route exact path=\"/\" render={() => (<Redirect to=\"/home\" />)} />           \r\n          <Route path=\"/broadcast/:id\" component={BroadcastContainer}/>      \r\n          <Route path=\"*\" render={() => (<Redirect to=\"/home\" />)} />\r\n        </Switch>\r\n      </HashRouter>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}