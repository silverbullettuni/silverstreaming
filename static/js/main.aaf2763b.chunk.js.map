{"version":3,"sources":["Containers/LandingContainer.js","Containers/Message.js","Containers/ChatContainer.js","Components/LeaveSessionButton.js","Containers/ParticipantsContainer.js","Containers/BroadcastContainer.js","Components/MuteMicButton.js","Containers/ViewContainer.js","Containers/InfoContainer.js","App.js","serviceWorker.js","index.js"],"names":["LandingContainer","useState","tokenId","setTokenId","tokenInput","useRef","className","onClick","token","chars","charlen","length","pointer","i","Math","floor","random","charAt","current","value","htmlFor","id","ref","onChange","event","target","placeholder","to","Message","props","message","useContext","MessageContext","map","m","index","key","username","action","createContext","ChatContainer","data","DataContext","uid","setUid","user","setUser","setMessage","setOnlineUsers","onlineCount","setOnlineCount","userHtml","setUserHtml","ENDPOINT","window","location","hostname","socket","socketIOClient","textbox","userList","generateMsgId","Date","getTime","updateSysMsg","o","msg","newMsg","type","msgId","concat","onlineUsers","users","JSON","parse","stringify","html","push","useEffect","participant","socketReady","on","userData","updateMsg","ready","Provider","align","u","rows","cols","emit","LeaveSessionButton","handleClick","this","React","Component","ParticipantsContainer","participantRefs","toggleMuteAll","newState","muted","console","log","participants","slice","selectParticipant","autoPlay","controls","playsInline","source","src","el","broadcasterContext","BroadcastContainer","origin","testParticipants","selectedParticipant","setSelectedParticipant","broadcaster","setBroadcaster","prompt","now","MuteMicButton","video","document","getElementById","ViewContainer","InfoContainer","setParticipant","isExit","setIsExit","wb","useParams","sessionStorage","getItem","obj","str","setItem","getUser","inputUsername","onbeforeunload","App","basename","path","component","exact","render","Boolean","match","ReactDOM","StrictMode","navigator","serviceWorker","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.aaf2763b.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef, createContext } from 'react';\r\n\r\nimport { Route, Switch, Redirect, HashRouter, Link } from 'react-router-dom';\r\n\r\n\r\nexport default function LandingContainer() {\r\n\r\n    const [tokenId, setTokenId] = useState(\"\");\r\n    const tokenInput = useRef();\r\n  \r\n    function generateToken(){\r\n        let token = '';\r\n        const chars = \"ABCDEFGHJKLMNPQRSTUVXYZabcdefghijklmnopqrstuvwxyz23456789\"\r\n        const charlen = chars.length;\r\n        let pointer = 0;\r\n        for (let i = 0; i < 12; i++){\r\n            pointer = Math.floor(Math.random()*charlen);\r\n            token += chars.charAt(pointer);\r\n        }\r\n\r\n        setTokenId(token);\r\n        tokenInput.current.value = token;\r\n    }\r\n\r\n\r\n    return (\r\n      <div className=\"container\">\r\n          <div className=\"landingInputBox\">\r\n            <div className=\"tokenGenerator\">\r\n                <button onClick={generateToken}>Generate token</button>\r\n            </div>\r\n            <div className=\"input\">\r\n                <label htmlFor=\"#tokenIdInput\">Token</label>\r\n                <input id=\"tokenIdInput\" ref={tokenInput} onChange={event => setTokenId(event.target.value)} placeholder=\"Input token id\"/>\r\n            </div>\r\n            <div className=\"buttons\">\r\n                <Link to={`/info/watch/${tokenId}`} className=\"modeButton\">\r\n                    <button>Watch</button>\r\n                 </Link>\r\n                <Link to={`/info/broadcast/${tokenId}`} className=\"modeButton\">\r\n                    <button>Broadcast</button>\r\n                </Link>\r\n            </div>\r\n          </div>\r\n          \r\n      \r\n      </div>\r\n    );\r\n  }\r\n  ","import React, {useState, useEffect, useRef, useContext } from 'react';\r\nimport { MessageContext } from './ChatContainer';\r\n\r\nexport default function Message(props) {\r\n\r\n    const message = useContext(MessageContext);\r\n\r\n    return (\r\n        <div id=\"record-box\">\r\n        {\r\n            message.map((m, index)=>\r\n            <p key={index}><span className='name'>{m.username}:</span><span className='text'>{m.action}</span></p>\r\n            )\r\n        }   \r\n        </div>\r\n    );\r\n}","import React, {useState, useEffect, useRef, useContext, createContext } from 'react';\r\nimport { unstable_renderSubtreeIntoContainer } from 'react-dom';\r\nimport {useParams} from 'react-router-dom';\r\nimport socketIOClient from \"socket.io-client\";\r\nimport MessageContainer from './Message';\r\n\r\nimport { DataContext } from './InfoContainer'\r\n\r\nexport const MessageContext = createContext();\r\n\r\nexport default function ChatContainer(props) {\r\n    const data = useContext(DataContext);\r\n    \r\n    const [uid, setUid] = useState([])\r\n    const [user, setUser] = useState([])\r\n    const [room, setRoom] = useState('');\r\n    const [message, setMessage] = useState([]);\r\n    const [chat, setChat ] = useState([]);\r\n    const [onlineUsers, setOnlineUsers] = useState({});\r\n    const [onlineCount, setOnlineCount] = useState(0);\r\n    const [userHtml, setUserHtml] = useState([]);\r\n\r\n    const ENDPOINT = window.location.hostname + \":4000\";\r\n\r\n    const socket = socketIOClient(ENDPOINT)\r\n   \r\n    const textbox = useRef();\r\n    const userList = useRef();\r\n\r\n    useEffect(() => {\r\n        setUser(data.participant)\r\n        setUid(data.uid)\r\n    },[message])\r\n\r\n    useEffect(()=>{\r\n        ready();\r\n    })\r\n\r\n    function generateMsgId() {\r\n        return new Date().getTime() + \"\" + Math.floor(Math.random()*899+100)\r\n    }\r\n\r\n\r\n    function updateSysMsg(o,action){\r\n        let msg = message\r\n        const newMsg = { type:'system', \r\n                         username:o.user.username, \r\n                         uid:o.user.uid, \r\n                         action:action,\r\n                         msgId:generateMsgId()}\r\n        msg = message.concat(newMsg);\r\n        setOnlineCount(o.onlineCount);\r\n        setOnlineUsers(o.onlineUsers);\r\n        setMessage(msg);\r\n\r\n        const users = JSON.parse(JSON.stringify(o.onlineUsers)); \r\n\r\n        // console.log(JSON.stringify(users))\r\n        let html = [];\r\n        for (let key in users){\r\n            html.push(users[key])\r\n        }\r\n        setUserHtml(html)\r\n\r\n    }\r\n\r\n    function updateMsg(userData){\r\n        let msg = message\r\n        let newMsg = { type:'chat', \r\n                         username:userData.username, \r\n                         uid:userData.uid, \r\n                         action:userData.message,\r\n                         msgId:generateMsgId()}\r\n        msg = message.concat(newMsg);\r\n        setMessage(msg);\r\n    }\r\n\r\n    function ready() {\r\n        const socketReady = socket;\r\n        socketReady.on('login', (o) => {\r\n            updateSysMsg(o,'login')\r\n        })\r\n        socketReady.on('exitChatbox', (o) => {\r\n            updateSysMsg(o,'exitChatbox')\r\n        })\r\n        socketReady.on('message', (userData) => {\r\n            updateMsg(userData)\r\n        })\r\n\r\n    }\r\n\r\n    function send(){\r\n        // const message = textbox.current.value\r\n        // const list = chat\r\n        // list.push({user:user, txt:message})\r\n        // setChat(message => [...message])\r\n\r\n        socket.emit('message', { uid:uid, username:user,message:textbox.current.value})\r\n        textbox.current.value = ''\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"display-flex\">\r\n                \r\n                <MessageContext.Provider value={message}>\r\n                    <MessageContainer/>\r\n                </MessageContext.Provider>\r\n                <div className=\"online-count\" align='right' \r\n                    ref={userList} >\r\n                    <p>\r\n                        Online Users: {onlineCount}\r\n                    </p>                    \r\n                </div>\r\n                <div className=\"online-users\">\r\n                    {\r\n                        userHtml.map((u, index) => \r\n                            <li key={index}>\r\n                                {u}\r\n                            </li>\r\n                        )\r\n                    }\r\n                </div>\r\n            </div> \r\n            <div id=\"send-box\">\r\n                    <textarea rows=\"1\" cols=\"80\" \r\n                    ref={textbox} \r\n                    className='text'></textarea>\r\n                    <div className=\"button\">\r\n                        <button type='submit' onClick={send}>Send</button>\r\n                    </div>\r\n                </div>         \r\n        </div>\r\n    );\r\n}","import React from 'react'\r\nimport { Route, Switch, Redirect, HashRouter, Link } from 'react-router-dom'\r\nimport LandingContainer from '../Containers/LandingContainer';\r\n\r\nclass LeaveSessionButton extends React.Component {\r\n    handleClick = () => {\r\n\r\n  };\r\n  \r\n  render() {\r\n    return (\r\n      <button onClick={this.handleClick}>\r\n         <Link to=\"/home\">Leave session</Link> \r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LeaveSessionButton;","import React, {createRef, useRef, useEffect} from 'react'\r\nimport StreamThumbnail from '../Components/StreamThumbail';\r\nimport LeaveSessionButton from '../Components/LeaveSessionButton';\r\n\r\n\r\n  \r\n\r\nexport default function ParticipantsContainer(props) {\r\n\r\n    const participantRefs = useRef([]);\r\n\r\n    useEffect(() => {\r\n        console.log(props.participants.length)\r\n        participantRefs.current = participantRefs.current.slice(0, props.participants.length);\r\n        console.log(participantRefs.current)\r\n    }, [props.participants]);\r\n\r\n    function toggleMuteAll(newState){\r\n        for(let ref of participantRefs.current){\r\n            ref.muted = newState;\r\n        }\r\n    }\r\n\r\n\r\n    \r\n\r\n    function selectParticipant(participant){\r\n        props.selectParticipant(participant);\r\n    }\r\n\r\n    \r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"muteButtons\">\r\n                <button onClick={() => toggleMuteAll(true)}>Mute all</button>\r\n                <button onClick={() => toggleMuteAll(false)}>Unmute all</button>\r\n            </div>\r\n            <div className=\"leaveButton\">\r\n                <LeaveSessionButton />\r\n            </div>           \r\n            <div className=\"thumbnails\">\r\n                {\r\n                    props.participants?.map((participant, index) => {\r\n                        return  <div className=\"streamThumbnail\" key={index-1} onClick={() => selectParticipant(participant)}>\r\n                                    <video \r\n                                        className=\"participantVideoPlayer\"\r\n                                        autoPlay \r\n                                        controls \r\n                                        playsInline\r\n                                        source={participant.src}\r\n                                        ref={el => participantRefs.current[index-1] = el} \r\n                                        key={index}\r\n                                    />\r\n                                </div>\r\n                    })\r\n                }\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}","import React, { useState, useEffect, useRef, useContext, createContext } from 'react'\r\nimport ChatContainer from './ChatContainer';\r\nimport ParticipantsContainer from './ParticipantsContainer';\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nconst peerConnections = {};\r\nconst config = {\r\n  iceServers: [\r\n    { \r\n      \"urls\": \"stun:stun.l.google.com:19302\",\r\n    },\r\n    // { \r\n    //   \"urls\": \"turn:TURN_IP?transport=tcp\",\r\n    //   \"username\": \"TURN_USERNAME\",\r\n    //   \"credential\": \"TURN_CREDENTIALS\"\r\n    // }\r\n  ]\r\n};\r\n\r\nexport const broadcasterContext = createContext();\r\n\r\nexport default function BroadcastContainer(props) {\r\n\r\n    const audioSelect = useRef();\r\n    const videoSelect = useRef();\r\n    const videoElement = useRef();\r\n    const socket = socketIOClient(window.location.origin);\r\n\r\n    const testParticipants = [\r\n      { id: \"1\", src: \"1s\" },\r\n      { id: \"2\", src: \"2s\" },\r\n      { id: \"3\", src: \"3s\" },\r\n      { id: \"4\", src: \"4s\" },\r\n      { id: \"5\", src: \"5s\" },\r\n      { id: \"6\", src: \"6s\" },\r\n      { id: \"7\", src: \"7s\" },\r\n      { id: \"8\", src: \"8s\" },\r\n      { id: \"9\", src: \"9s\" },\r\n    ]\r\n\r\n    const [participants, setParticipants] = useState(testParticipants); // temp\r\n    const [selectedParticipant, setSelectedParticipant] = useState(testParticipants[0]);\r\n\r\n    function selectParticipant(participant){\r\n      setSelectedParticipant(participant);\r\n    }\r\n\r\n\r\n    const [broadcaster, setBroadcaster] = useState([])\r\n    useEffect(() => {\r\n      let user = window.prompt('Please enter your username ');\r\n      if (!user){ user = Date.now() }\r\n      setBroadcaster(user);\r\n    },[])\r\n\r\n    /*useEffect(() => {\r\n        getStream()\r\n            .then(getDevices)\r\n            .then(gotDevices);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        \r\n        \r\n\r\n            socket.on(\"answer\", (id, description) => {\r\n                peerConnections[id].setRemoteDescription(description);\r\n            });\r\n            \r\n            socket.on(\"watcher\", id => {\r\n                const peerConnection = new RTCPeerConnection(config);\r\n                peerConnections[id] = peerConnection;\r\n            \r\n                let stream = videoElement.current.srcObject;\r\n                stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));\r\n            \r\n                peerConnection.onicecandidate = event => {\r\n                if (event.candidate) {\r\n                    socket.emit(\"candidate\", id, event.candidate);\r\n                }\r\n                };\r\n            \r\n                peerConnection\r\n                .createOffer()\r\n                .then(sdp => peerConnection.setLocalDescription(sdp))\r\n                .then(() => {\r\n                    socket.emit(\"offer\", id, peerConnection.localDescription);\r\n                });\r\n            });\r\n            \r\n            socket.on(\"candidate\", (id, candidate) => {\r\n                peerConnections[id].addIceCandidate(new RTCIceCandidate(candidate));\r\n            });\r\n            \r\n            socket.on(\"disconnectPeer\", id => {\r\n                peerConnections[id].close();\r\n                delete peerConnections[id];\r\n            });\r\n\r\n            return () => socket.disconnect();\r\n\r\n    }, []);\r\n\r\n    function getDevices() {\r\n        return navigator.mediaDevices.enumerateDevices();\r\n      }\r\n      \r\n      function gotDevices(deviceInfos) {\r\n        window.deviceInfos = deviceInfos;\r\n        for (const deviceInfo of deviceInfos) {\r\n          const option = document.createElement(\"option\");\r\n          option.value = deviceInfo.deviceId;\r\n          if (deviceInfo.kind === \"audioinput\") {\r\n            option.text = deviceInfo.label || `Microphone ${audioSelect.current.length + 1}`;\r\n            audioSelect.current.appendChild(option);\r\n          } else if (deviceInfo.kind === \"videoinput\") {\r\n            option.text = deviceInfo.label || `Camera ${videoSelect.current.length + 1}`;\r\n            videoSelect.current.appendChild(option);\r\n          }\r\n        }\r\n      }\r\n      \r\n      function getStream() {\r\n        if (window.stream) {\r\n          window.stream.getTracks().forEach(track => {\r\n            track.stop();\r\n          });\r\n        }\r\n        const audioSource = audioSelect.current.value;\r\n        const videoSource = videoSelect.current.value;\r\n        const constraints = {\r\n          audio: { deviceId: audioSource ? { exact: audioSource } : undefined },\r\n          video: { deviceId: videoSource ? { exact: videoSource } : undefined }\r\n        };\r\n        return navigator.mediaDevices\r\n          .getUserMedia(constraints)\r\n          .then(gotStream)\r\n          .catch(handleError);\r\n      }\r\n      \r\n      function gotStream(stream) {\r\n        window.stream = stream;\r\n        audioSelect.current.selectedIndex = [...audioSelect.current.options].findIndex(\r\n          option => option.text === stream.getAudioTracks()[0].label\r\n        );\r\n        videoSelect.current.selectedIndex = [...videoSelect.current.options].findIndex(\r\n          option => option.text === stream.getVideoTracks()[0].label\r\n        );\r\n        videoElement.current.srcObject = stream;\r\n        socket.emit(\"broadcaster\");\r\n      }\r\n      \r\n      function handleError(error) {\r\n        console.error(\"Error: \", error);\r\n      }*/\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <span>{selectedParticipant?.id}</span>\r\n            <video \r\n                className=\"mainVideoPlayer\"\r\n                autoPlay \r\n                controls \r\n                playsInline\r\n                src={selectedParticipant?.src}\r\n            />  \r\n\r\n            <ParticipantsContainer participants={participants} selectParticipant={selectParticipant}/>\r\n\r\n            <broadcasterContext.Provider value={broadcaster}>\r\n              <ChatContainer/>\r\n            </broadcasterContext.Provider>         \r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\n\r\nclass MuteMicButton extends React.Component {\r\n    handleClick = () => {\r\n      var video=document.getElementById(\"viewerVideo\"); \r\n      if(video != null){\r\n        if(video.muted){\r\n          video.muted=false;\r\n        }else{\r\n          video.muted=true;\r\n        }\r\n      } \r\n\r\n  };\r\n  \r\n  render() {\r\n    return (\r\n      <button onClick={this.handleClick}>\r\n         Mute microphone \r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MuteMicButton;","import React, { useState, useEffect, useContext } from 'react'\r\n\r\nimport ChatContainer from './ChatContainer';\r\nimport socketIOClient from \"socket.io-client\";\r\nimport LeaveSessionButton from '../Components/LeaveSessionButton';\r\nimport MuteMicButton from '../Components/MuteMicButton';\r\n\r\nconst config = {\r\n    iceServers: [\r\n        { \r\n          \"urls\": \"stun:stun.l.google.com:19302\",\r\n        },\r\n        // { \r\n        //   \"urls\": \"turn:TURN_IP?transport=tcp\",\r\n        //   \"username\": \"TURN_USERNAME\",\r\n        //   \"credential\": \"TURN_CREDENTIALS\"\r\n        // }\r\n    ]\r\n  };\r\n\r\nexport default function ViewContainer(props) {\r\n    const [source, setSource] = useState(\"\");\r\n    let peerConnection;\r\n\r\n\r\n    /*useEffect(() => {\r\n        const socket = socketIOClient(window.location.origin);\r\n        socket.on(\"offer\", (id, description) => {\r\n            peerConnection = new RTCPeerConnection(config);\r\n            peerConnection\r\n              .setRemoteDescription(description)\r\n              .then(() => peerConnection.createAnswer())\r\n              .then(sdp => peerConnection.setLocalDescription(sdp))\r\n              .then(() => {\r\n                socket.emit(\"answer\", id, peerConnection.localDescription);\r\n              });\r\n            peerConnection.ontrack = event => {\r\n                setSource(event.streams[0]);\r\n              \r\n            };\r\n            peerConnection.onicecandidate = event => {\r\n              if (event.candidate) {\r\n                socket.emit(\"candidate\", id, event.candidate);\r\n              }\r\n            };\r\n          });\r\n          \r\n          \r\n          socket.on(\"candidate\", (id, candidate) => {\r\n            peerConnection\r\n              .addIceCandidate(new RTCIceCandidate(candidate))\r\n              .catch(e => console.error(e));\r\n          });\r\n          \r\n          socket.on(\"connect\", () => {\r\n            socket.emit(\"watcher\");\r\n          });\r\n          \r\n          socket.on(\"broadcaster\", () => {\r\n            socket.emit(\"watcher\");\r\n          });\r\n          \r\n          socket.on(\"disconnectPeer\", () => {\r\n            peerConnection.close();\r\n          });\r\n\r\n          return () => socket.disconnect();\r\n\r\n    }, []);*/\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <video \r\n                id=\"viewerVideo\"\r\n                className=\"mainVideoPlayer\"\r\n                autoPlay \r\n                controls \r\n                playsInline\r\n                src={source}\r\n            />\r\n            <div className=\"leaveButton\">\r\n                <MuteMicButton />\r\n                <LeaveSessionButton />\r\n            </div>     \r\n            <ChatContainer/>\r\n\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect, createContext, useRef } from 'react';\r\nimport {useParams} from \"react-router-dom\";\r\nimport BroadcastContainer from './BroadcastContainer';\r\nimport ViewContainer from './ViewContainer';\r\n\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nexport const DataContext = createContext();\r\n \r\nexport default function InfoContainer(props){\r\n\r\n    const ENDPOINT = window.location.hostname + \":4000\";\r\n    \r\n    const [uid, setUid] = useState('');\r\n    const socket = socketIOClient(ENDPOINT);\r\n    const [participant, setParticipant] = useState('');\r\n\r\n    const [isExit, setIsExit] = useState(false);\r\n\r\n    const {wb} = useParams();\r\n \r\n    // Variable for all data\r\n    const data = {\r\n        participant:participant,\r\n        uid:uid\r\n    };\r\n    \r\n    \r\n\r\n    useEffect(() => {\r\n        inputUsername();\r\n        window.onbeforeunload = function () {\r\n            setIsExit(true);\r\n            socket.emit('exitChatbox')\r\n        }\r\n    },[isExit])\r\n \r\n    function generateUid() {\r\n        return new Date().getTime() + \"\" + Math.floor(Math.random()*9+1)\r\n    }\r\n\r\n    function inputUsername(){\r\n        if (window.sessionStorage.getItem('userData') === null){\r\n            let participant = window.prompt('Please enter your username ');\r\n            let uid = generateUid();\r\n            if (!participant){ participant =  'guest' + uid}\r\n            setParticipant(participant);\r\n            setUid(uid);\r\n\r\n            var obj = {uid:uid, username:participant}\r\n            var str = JSON.stringify(obj)\r\n            \r\n            window.sessionStorage.setItem('userData', str)\r\n\r\n            if(participant != ''){\r\n                socket.emit('login',{uid:uid, username:participant})\r\n            }\r\n        }else{\r\n            let getUser = window.sessionStorage.getItem('userData');\r\n            var obj = JSON.parse(getUser)\r\n            setUid(obj.uid);\r\n            setParticipant(obj.username);\r\n            if(participant != ''){\r\n                socket.emit('login',{uid:uid, username:participant})\r\n            }\r\n        }\r\n         \r\n    }\r\n \r\n    if(wb == \"watch\"){\r\n        return(\r\n            <div className=\"container\">\r\n                <DataContext.Provider value={data}>\r\n                    <ViewContainer/>\r\n                </DataContext.Provider>\r\n            </div>\r\n        );\r\n    }else if(wb == \"broadcast\"){\r\n        return(\r\n            <div className=\"container\">\r\n                <DataContext.Provider value={data}>\r\n                    <BroadcastContainer />\r\n                </DataContext.Provider>\r\n            </div>\r\n        );\r\n    }\r\n \r\n}","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport { Route, Switch, Redirect, HashRouter, Link } from 'react-router-dom'\r\nimport LandingContainer from './Containers/LandingContainer';\r\nimport InfoContainer from './Containers/InfoContainer';\r\n\r\nfunction App() {\r\n\r\n  const [viewerMode, setMode] = useState(true);\r\n\r\n  function handleClick(e) {\r\n    e.preventDefault();\r\n    setMode(!viewerMode);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <HashRouter basename=\"/\">\r\n        <Link to='/' className=\"AppHeader\">\r\n          Silverstreaming Demo\r\n        </Link>\r\n      \r\n        <Switch>\r\n          <Route path=\"/home\" component={LandingContainer} />\r\n          <Route path=\"/info/:wb/:id\" component={InfoContainer} /> \r\n          {/* <Route path=\"/watch/:id\" component={ViewContainer} /> */}\r\n          <Route exact path=\"/\" render={() => (<Redirect to=\"/home\" />)} />           \r\n          {/* <Route path=\"/broadcast/:id\" component={BroadcastContainer}/>       */}\r\n          <Route path=\"*\" render={() => (<Redirect to=\"/home\" />)} />\r\n        </Switch>\r\n      </HashRouter>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}